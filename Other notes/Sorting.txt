BubbleSort: O(n^2) - run through array and swap pairs if right<left, repeat n-1 times

SelectionSort: O(n^2) - run through array and find min. Swap that min with first
 index. Then run through array after first index, repeat

InsertionSort: O(n^2) - run through array starting at index 1(key). Compare key 
with previous nodes and insert it when it is greater than a previous node, or at the start. Repeat

MergeSort: Theta(nlogn) - divide array in half. Run mergeSort on left and 
right sides(so keep dividing in halves). Merge them all back together and sort as you do

QuickSort: Avg: O(nlogn) - Pick a pivot, cut array in half with <pivot, >pivot 
partitions, keep doing that like merge. Place pivots in right position.

BFS: O(V+E), Queue, Slower
DFS: O(V+E), Stack, Faster

Adjacency List: Small, dense graphs
Adjacency Matrix: Large, sparse graphs

Heap stores dynamic memory data, Stack stores local memory data
Stack - Last in First out(LIFO)
Queue - First in First out (FIFO)

TCP reliable, slower
UDP unreliable, sends data, no checks

CPP start
#include <iostream>
using namespace std;
int main(){